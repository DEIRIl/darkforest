Index: classEnemy.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\nclass Enemy(pygame.sprite.Sprite):\r\n    image = load_image(\"enemy.png\")\r\n\r\n    def __init__(self, x, y, group):\r\n        super().__init__(group)\r\n        self.image = pygame.transform.scale(Enemy.image, (100, 150))\r\n        self.rect = self.image.get_rect().move(x, y)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.vx = 0\r\n        self.vy = 5\r\n        self.v = 5\r\n\r\n    def update(self, floor, objects, motion):\r\n        if motion == \"r\":\r\n            self.rect = self.rect.move(5, 0)\r\n        elif motion == \"l\":\r\n            self.rect = self.rect.move(-5, 0)\r\n        # self.rect.x += self.vx\r\n        self.rect.y += self.vy\r\n        if pygame.sprite.spritecollideany(self, floor) or pygame.sprite.spritecollideany(self, objects):\r\n            self.vy = 0\r\n            self.jump_count = 0\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classEnemy.py b/classEnemy.py
--- a/classEnemy.py	(revision 39fab1952f818d0cb46c2a29c6eba4beff10b199)
+++ b/classEnemy.py	(date 1705696819418)
@@ -1,26 +1,159 @@
 import pygame
 
 from libraryImages import load_image
+from classBullet import Arrow, Branch
+
 
-class Enemy(pygame.sprite.Sprite):
-    image = load_image("enemy.png")
+class StandartEnemy(pygame.sprite.Sprite):
 
-    def __init__(self, x, y, group):
+
+    def __init__(self, x, y, group, size, im=None):
         super().__init__(group)
-        self.image = pygame.transform.scale(Enemy.image, (100, 150))
+        self.radius = radius = 0.07 * size[1]
+        if im is None:
+            self.image = pygame.transform.scale(load_image("player41.png"), (0.1 * size[1], 0.1 * size[1]))
+        else:
+            self.image = pygame.transform.scale(im[0], im[1])
         self.rect = self.image.get_rect().move(x, y)
         self.mask = pygame.mask.from_surface(self.image)
-        self.vx = 0
+        self.vx = 2
         self.vy = 5
         self.v = 5
+        self.time = 0
+        self.Ttime = 200
+        self.size = size
+
+    def update(self, floor, objects, motion, player, bullets):
+        if motion == "r":
+            self.rect = self.rect.move(player.v, 0)
+        elif motion == "l":
+            self.rect = self.rect.move(-player.v, 0)
+        self.rect.y += self.vy
+        if pygame.sprite.spritecollideany(self, objects):
+            if ((self.rect.x - player.rect.x) ** 2 + (self.rect.y - player.rect.y) ** 2) ** 0.5 <= 0.3 * self.size[0]:
+                if self.Ttime >= 200:
+                    self.Ttime = 0
+                    if player.rect.x > self.rect.x:
+                        Arrow(self.rect.x, self.rect.y, *self.size, bullets, 15)
+                    else:
+                        Arrow(self.rect.x, self.rect.y, *self.size, bullets, -15)
+                else:
+                    self.Ttime += 1
+                self.vy = 0
+            else:
+                self.Ttime = 200
+                self.vy = 0
+                self.rect.x += self.vx
+        else:
+            if ((self.rect.x - player.rect.x) ** 2 + (self.rect.y - player.rect.y) ** 2) ** 0.5 <= 0.3 * self.size[0]:
+                if self.Ttime >= 200:
+                    self.Ttime = 0
+                    if player.rect.x > self.rect.x:
+                        Arrow(self.rect.x, self.rect.y, *self.size, bullets, 15)
+                    else:
+                        Arrow(self.rect.x, self.rect.y, *self.size, bullets, -15)
+                else:
+                    self.Ttime += 1
+            else:
+                self.Ttime = 200
+                if self.time >= 100:
+                    self.vx = -self.vx
+                    self.rect.x += self.vx
+                    self.time = 0
+                else:
+                    self.time += 1
 
-    def update(self, floor, objects, motion):
+
+class NoBulletEnemy(StandartEnemy):
+    image = load_image("enemy_slime.png")
+
+    def __init__(self, x, y, group, size):
+        self.frames = []
+        self.frame_tick = 20
+        self.cut_sheet(NoBulletEnemy.image, 8, 3)
+        self.cur_frame = 16
+        self.stop = False
+        super().__init__(x, y, group, size, (self.frames[self.cur_frame], (0.055 * size[0], 0.06 * size[1])))
+
+    def cut_sheet(self, sheet, columns, rows):
+        self.rect = pygame.Rect(0, 0, sheet.get_width() // columns,
+                                sheet.get_height() // rows)
+        for j in range(rows):
+            for i in range(columns):
+                frame_location = (self.rect.w * i, self.rect.h * j)
+                self.frames.append(sheet.subsurface(pygame.Rect(
+                    frame_location, self.rect.size)))
+
+    def update(self, floor, objects, motion, player, bullets):
         if motion == "r":
-            self.rect = self.rect.move(5, 0)
+            self.rect = self.rect.move(player.v, 0)
         elif motion == "l":
-            self.rect = self.rect.move(-5, 0)
-        # self.rect.x += self.vx
+            self.rect = self.rect.move(-player.v, 0)
         self.rect.y += self.vy
-        if pygame.sprite.spritecollideany(self, floor) or pygame.sprite.spritecollideany(self, objects):
+        if self.stop:
+            self.cur_frame = 16
+        elif self.vx <= 0:
+            self.cur_frame = 0
+        elif self.vx >= 0:
+            self.cur_frame = 8
+        self.image = self.frames[self.cur_frame]
+        if pygame.sprite.spritecollideany(self, objects):
             self.vy = 0
-            self.jump_count = 0
+            self.rect.x += self.vx
+            self.stop = False
+        else:
+            if self.time >= 200:
+                self.vx = -self.vx
+                self.rect.x += self.vx
+                self.time = 0
+                self.stop = False
+            else:
+                self.time += 1
+                self.stop = True
+
+
+class NoMovementEnemy(StandartEnemy):
+    def __init__(self, x, y, group, size):
+        self.image1 = pygame.transform.scale(load_image("enemy_tree_idle.png"), (0.1 * size[1], 0.1 * size[1]))
+        self.image2 = pygame.transform.scale(load_image("enemy_tree_attack.png"), (0.1 * size[1], 0.1 * size[1]))
+        self.image3 = pygame.transform.scale(load_image("player41.png"), (0.1 * size[1], 0.1 * size[1]))
+        self.frames = []
+        self.frame_tick = 20
+        self.cut_sheet(NoMovementEnemy.image, 8, 3)
+        self.cur_frame = 16
+        self.stop = False
+        super().__init__(x, y, group, size, (NoMovementEnemy.image, (0.075 * size[0], 0.15 * size[1])))
+
+    def cut_sheet(self, sheet, columns, rows):
+        self.rect = pygame.Rect(0, 0, sheet.get_width() // columns,
+                                sheet.get_height() // rows)
+        for j in range(rows):
+            for i in range(columns):
+                frame_location = (self.rect.w * i, self.rect.h * j)
+                self.frames.append(sheet.subsurface(pygame.Rect(
+                    frame_location, self.rect.size)))
+
+    def update(self, floor, objects, motion, player, bullets):
+        if motion == "r":
+            self.rect = self.rect.move(player.v, 0)
+        elif motion == "l":
+            self.rect = self.rect.move(-player.v, 0)
+        self.rect.y += self.vy
+        if pygame.sprite.spritecollideany(self, floor):
+            if ((self.rect.x - player.x) ** 2 + (self.rect.y - player.y) ** 2) ** 0.5 <= 0.4 * self.size[0]:
+                if self.Ttime >= 200:
+                    self.Ttime = 0
+                    Branch(self.rect.x, self.rect.y, *self.size, bullets, (player.rect.x, player.rect.y))
+                else:
+                    self.Ttime += 1
+                self.vy = 0
+            else:
+                self.Ttime = 200
+                self.vy = 0
+        # else:
+        #     if ((self.rect.x - player.x) ** 2 + (self.rect.y - player.y) ** 2) ** 0.5 <= 0.2 * self.size[0]:
+        #         if self.Ttime >= 200:
+        #             self.Ttime = 0
+        #             Branch(self.rect.x, self.rect.y, *self.size, bullets, (player.rect.x, player.rect.y))
+        #         else:
+        #             self.Ttime += 1
