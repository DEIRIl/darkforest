Index: classBlock.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\nclass Block(pygame.sprite.Sprite):\r\n    image = load_image('block.png')\r\n    def __init__(self, x, coord, w, h, group):\r\n        super().__init__(group)\r\n        coords = {1: 0.6 * h, 2: 0.3 * h}\r\n        self.image = pygame.transform.scale(Block.image, (0.1 * w, 0.03 * h))\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.rect = self.image.get_rect().move(x, coords[coord])\r\n\r\n    def update(self, motion, speed):\r\n        if motion == \"r\":\r\n            self.rect = self.rect.move(speed, 0)\r\n        else:\r\n            self.rect = self.rect.move(-speed, 0)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classBlock.py b/classBlock.py
--- a/classBlock.py	(revision 1c74f9d7172b2743895ddf239d793501d05fb03c)
+++ b/classBlock.py	(date 1704314156967)
@@ -6,7 +6,7 @@
     image = load_image('block.png')
     def __init__(self, x, coord, w, h, group):
         super().__init__(group)
-        coords = {1: 0.6 * h, 2: 0.3 * h}
+        coords = {1: 0.6 * h, 2: 0.3 * h, 3: 0.9 * h}
         self.image = pygame.transform.scale(Block.image, (0.1 * w, 0.03 * h))
         self.mask = pygame.mask.from_surface(self.image)
         self.rect = self.image.get_rect().move(x, coords[coord])
Index: classPlayer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    image1 = load_image(\"player2.png\", -1)\r\n    image2 = pygame.transform.flip(image1, True, False)\r\n\r\n    def __init__(self, x, y, radius, speed, all_sprites, size, screen):\r\n        super().__init__(all_sprites)\r\n        self.radius = radius\r\n        self.image = pygame.transform.scale(Player.image1, (radius, 1.5 * radius))\r\n        self.rect = self.image.get_rect().move(x, y)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.x1motoin = \"n\"\r\n        self.x2motoin = \"n\"\r\n        self.vx = 0\r\n        self.vy = speed\r\n        self.v = speed\r\n        self.x = x\r\n        self.y = y\r\n        self.screen_size = size\r\n        self.jump_max = 20\r\n        self.jump_count = 0\r\n        self.max_hp = 100\r\n        self.hp = 100\r\n        self.sc = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\r\n        self.screen = screen\r\n\r\n    def show_hp(self):\r\n        pygame.draw.rect(self.sc, \"grey\", (28, self.screen_size[1] - 77, 304, 34))\r\n        pygame.draw.rect(self.sc, \"green\", (30, self.screen_size[1] - 75, 3 * self.hp, 30))\r\n        pygame.draw.rect(self.sc, \"red\", (30 + 3 * self.hp, self.screen_size[1] - 75, 3 * (self.max_hp - self.hp), 30))\r\n        self.screen.blit(self.sc, (0, 0))\r\n\r\n    def death(self):\r\n        pass\r\n\r\n\r\n    def update(self, jump, fall, objects, floor):\r\n        if self.x1motoin == \"y\" and self.x2motoin == \"y\":\r\n            self.vx = 0\r\n        elif self.x1motoin == \"y\":\r\n            self.vx = self.v\r\n            self.image = pygame.transform.scale(Player.image1, (self.radius, 1.5 * self.radius))\r\n        elif self.x2motoin == \"y\":\r\n            self.vx = -self.v\r\n            self.image = pygame.transform.scale(Player.image2, (self.radius, 1.5 * self.radius))\r\n        else:\r\n            self.vx = 0\r\n        if jump:\r\n            self.vy = -self.jump_count\r\n            if self.jump_count > 0 and not pygame.sprite.spritecollideany(self,\r\n                                                                          floor) and not pygame.sprite.spritecollideany(\r\n                    self, objects):\r\n                self.jump_count -= 1\r\n            elif not pygame.sprite.spritecollideany(self, floor) and not pygame.sprite.spritecollideany(self, objects):\r\n                jump = False\r\n            elif pygame.sprite.spritecollideany(self, floor) and pygame.sprite.spritecollideany(self, objects):\r\n                jump = False\r\n                self.jump_count = 0\r\n                self.vy = 0\r\n        elif fall and self.jump_count <= 0:\r\n            if not pygame.sprite.spritecollideany(self, floor) and pygame.sprite.spritecollideany(self, objects):\r\n                self.jump_count -= 2\r\n                self.vy = -self.jump_count\r\n            elif not pygame.sprite.spritecollideany(self, floor) and not pygame.sprite.spritecollideany(self, objects):\r\n                fall = False\r\n                self.vy = -self.jump_count\r\n                self.jump_count = self.vy\r\n            elif pygame.sprite.spritecollideany(self, floor):\r\n                fall = False\r\n                self.vy = 0\r\n        else:\r\n            self.jump = False\r\n            fall = False\r\n            self.vy = self.jump_count if self.jump_count != 0 else self.vy\r\n            self.jump_count += 1\r\n            if pygame.sprite.spritecollideany(self, floor) or pygame.sprite.spritecollideany(self, objects):\r\n                self.vy = 0\r\n                self.jump_count = 0\r\n        self.rect = self.rect.move(self.vx, self.vy)\r\n        # print(jump, fall, self.jump_count)\r\n        if self.hp == 0:\r\n            self.death()\r\n        return (jump, fall)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classPlayer.py b/classPlayer.py
--- a/classPlayer.py	(revision 1c74f9d7172b2743895ddf239d793501d05fb03c)
+++ b/classPlayer.py	(date 1704314328747)
@@ -10,7 +10,7 @@
     def __init__(self, x, y, radius, speed, all_sprites, size, screen):
         super().__init__(all_sprites)
         self.radius = radius
-        self.image = pygame.transform.scale(Player.image1, (radius, 1.5 * radius))
+        self.image = pygame.transform.scale(Player.image1, (-1, radius))
         self.rect = self.image.get_rect().move(x, y)
         self.mask = pygame.mask.from_surface(self.image)
         self.x1motoin = "n"
Index: classMainFloor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nclass MainFloor(pygame.sprite.Sprite):\r\n    def __init__(self, size, group):\r\n        super().__init__(group)\r\n        self.image = pygame.Surface((size[0], 0.1 * size[1]), pygame.SRCALPHA, 32)\r\n        pygame.draw.rect(self.image, pygame.Color(\"white\"), (0, 0, size[0], size[1]))\r\n        self.rect = pygame.Rect(0, 0.9 * size[1], size[0], size[1])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classMainFloor.py b/classMainFloor.py
--- a/classMainFloor.py	(revision 1c74f9d7172b2743895ddf239d793501d05fb03c)
+++ b/classMainFloor.py	(date 1704313236038)
@@ -1,8 +1,8 @@
 import pygame
 
-class MainFloor(pygame.sprite.Sprite):
+class MainFloor(pygame.sprite.Sprite): # Создание пола
     def __init__(self, size, group):
         super().__init__(group)
         self.image = pygame.Surface((size[0], 0.1 * size[1]), pygame.SRCALPHA, 32)
-        pygame.draw.rect(self.image, pygame.Color("white"), (0, 0, size[0], size[1]))
+        pygame.draw.rect(self.image, pygame.Color("#1a0a0c"), (0, 0, size[0], size[1]))
         self.rect = pygame.Rect(0, 0.9 * size[1], size[0], size[1])
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\npygame.init()\r\nscreen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\r\nw, h = screen.get_size()\r\nall_units = pygame.sprite.Group()\r\nfloor = pygame.sprite.Group()\r\nobjects = pygame.sprite.Group()\r\n\r\nfrom classPlayer import Player\r\nfrom classMainFloor import MainFloor\r\nfrom classBlock import Block\r\n\r\nMainFloor((w, h), floor)\r\nBlock(0.2 * w, 1, w, h, objects)\r\nBlock(0.2 * w, 2, w, h, objects)\r\nrunning = True\r\nplayer = Player(0.5 * w - 20, 0.5 * h - 20, 75, 5, all_units, (w, h), screen)\r\nclock = pygame.time.Clock()\r\njump = False\r\nf = False\r\nfall = False\r\nscreen_image = pygame.transform.scale(load_image(\"screen2.png\"), (w, h))\r\n# FALL = pygame.USEREVENT + 1\r\n# pygame.time.set_timer(FALL, 1)\r\nwhile running:\r\n    screen.fill((50, 50, 50))\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n        if event.type == pygame.KEYDOWN:\r\n            if event.key == pygame.K_d:\r\n                player.x1motoin = \"y\"\r\n            if event.key == pygame.K_a:\r\n                player.x2motoin = \"y\"\r\n            if (event.key == pygame.K_w or event.key == pygame.K_SPACE) and not jump and not f and not fall and player.jump_count == 0:\r\n                jump = True\r\n                player.jump_count = player.jump_max\r\n            if event.key == pygame.K_LSHIFT:\r\n                player.v *= 2\r\n            if event.key == pygame.K_s:\r\n                f = True\r\n            if event.key == pygame.K_SPACE and f:\r\n                fall = True\r\n                player.jump_count = -player.jump_max\r\n        if event.type == pygame.KEYUP:\r\n            if event.key == pygame.K_d:\r\n                player.x1motoin = \"n\"\r\n            if event.key == pygame.K_a:\r\n                player.x2motoin = \"n\"\r\n            if event.key == pygame.K_LSHIFT:\r\n                player.v /= 2\r\n            if event.key == pygame.K_s:\r\n                f = False\r\n    if player.rect.x < 0.3 * w:\r\n        player.rect = player.rect.move(-player.vx, 0)\r\n        objects.update(\"r\", player.v)\r\n    if player.rect.x + player.radius > 0.7 * w:\r\n        player.rect = player.rect.move(-player.vx, 0)\r\n        objects.update(\"l\", player.v)\r\n    jump, fall = player.update(jump, fall, objects, floor)\r\n    screen.blit(screen_image, (0, 0))\r\n    objects.draw(screen)\r\n    floor.draw(screen)\r\n    all_units.draw(screen)\r\n    player.show_hp()\r\n    clock.tick(120)\r\n    pygame.display.flip()\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 1c74f9d7172b2743895ddf239d793501d05fb03c)
+++ b/main.py	(date 1704313236032)
@@ -16,6 +16,7 @@
 MainFloor((w, h), floor)
 Block(0.2 * w, 1, w, h, objects)
 Block(0.2 * w, 2, w, h, objects)
+Block(0.2 * w, 3, w, h, objects)
 running = True
 player = Player(0.5 * w - 20, 0.5 * h - 20, 75, 5, all_units, (w, h), screen)
 clock = pygame.time.Clock()
