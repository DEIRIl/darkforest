Index: classPlayer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    image = pygame.transform.scale(load_image(\"Idle.png\"), (1500, 200))\r\n    image1 = pygame.transform.scale(load_image(\"Jump.png\"), (2750, 200))\r\n    image2 = pygame.transform.scale(load_image(\"Run.png\"), (2000, 200))\r\n\r\n    def __init__(self, x, y, all_sprites, size, screen):\r\n        super().__init__(all_sprites)\r\n        self.frames = []\r\n        self.frame_tick = 20\r\n        self.frame_tick_idle = 0\r\n        self.cut_sheet(Player.image, 6, 1)\r\n        self.cut_sheet(Player.image1, 11, 1)\r\n        self.cut_sheet(Player.image2, 8, 1)\r\n        self.cur_frame = 0\r\n        self.image = self.frames[self.cur_frame]\r\n        self.cur_frame_idle = 1\r\n        self.radius = radius = 0.07 * size[1]\r\n        self.rect = self.image.get_rect().move(x, y)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.x1motoin = \"n\"\r\n        self.x2motoin = \"n\"\r\n        self.vx = 0\r\n        self.vy = 5\r\n        self.v = 10\r\n        self.x = x\r\n        self.y = y\r\n        self.screen_size = size\r\n        self.jump_max = 22\r\n        self.jump_count = 0\r\n        self.max_hp = 100\r\n        self.hp = 100\r\n        self.sc = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\r\n        self.screen = screen\r\n        self.running = True\r\n\r\n    def cut_sheet(self, sheet, columns, rows):\r\n        self.rect = pygame.Rect(0, 0, sheet.get_width() // columns,\r\n                                sheet.get_height() // rows)\r\n        for j in range(rows):\r\n            for i in range(columns):\r\n                frame_location = (self.rect.w * i, self.rect.h * j)\r\n                self.frames.append(sheet.subsurface(pygame.Rect(\r\n                    frame_location, self.rect.size)))\r\n\r\n    def show_hp(self):\r\n        pygame.draw.rect(self.sc, \"gray\", (\r\n            0.0145 * self.screen_size[0], self.screen_size[1] - 0.0712 * self.screen_size[1],\r\n            3.04 * self.max_hp,\r\n            0.0315 * self.screen_size[1]))\r\n        pygame.draw.rect(self.sc, \"red\", (\r\n            0.0152 * self.screen_size[0], self.screen_size[1] - 0.06929 * self.screen_size[1], 3 * self.hp,\r\n            0.015625 * self.screen_size[0]))\r\n        pygame.draw.rect(self.sc, \"black\", (\r\n            0.0152 * self.screen_size[0] + 3 * self.hp, self.screen_size[1] - 0.06929 * self.screen_size[1],\r\n            3 * (self.max_hp - self.hp), 0.015625 * self.screen_size[0]))\r\n        self.screen.blit(self.sc, (0, 0))\r\n\r\n    def death(self):\r\n        self.running = False\r\n\r\n    def upd(self, jump, fall, objects, thorns, floor, bullets, heals):\r\n        a = False\r\n        if self.x1motoin == \"y\" and self.x2motoin == \"y\":\r\n            self.vx = 0\r\n        elif self.x1motoin == \"y\":\r\n            self.frame_tick_idle = 10\r\n            self.frame_tick += 1\r\n            self.vx = self.v\r\n            if self.frame_tick >= 10:\r\n                if not jump:\r\n                    self.cur_frame = (self.cur_frame + 1) % 8\r\n                    self.image = self.frames[self.cur_frame + 14]\r\n                else:\r\n                    self.cur_frame = (self.cur_frame + 1) % 11\r\n                    self.image = self.frames[self.cur_frame + 6]\r\n                self.frame_tick = 0\r\n        elif self.x2motoin == \"y\":\r\n            self.frame_tick_idle = 10\r\n            self.frame_tick += 1\r\n            self.vx = -self.v\r\n            if self.frame_tick >= 10:\r\n                if not jump:\r\n                    self.cur_frame = (self.cur_frame + 1) % 8\r\n                    self.image = pygame.transform.flip(self.frames[self.cur_frame + 14], True, False)\r\n                else:\r\n                    self.cur_frame = (self.cur_frame + 1) % 11\r\n                    self.image = pygame.transform.flip(self.frames[self.cur_frame + 6], True, False)\r\n                self.frame_tick = 0\r\n        else:\r\n            self.vx = 0\r\n            self.cur_frame = 0\r\n            if self.frame_tick_idle >= 10:\r\n                self.cur_frame_idle = (self.cur_frame_idle + 1) % 6\r\n                self.frame_tick_idle = 0\r\n            else:\r\n                self.frame_tick_idle += 1\r\n            self.image = self.frames[self.cur_frame_idle]\r\n            self.frame_tick = 10\r\n        if jump:\r\n            self.vy = -self.jump_count\r\n            if self.jump_count > 0 and not pygame.sprite.spritecollideany(self,\r\n                                                                          floor) and not pygame.sprite.spritecollideany(\r\n                self, objects):\r\n                self.jump_count -= 1\r\n            elif not pygame.sprite.spritecollideany(self, floor) and not pygame.sprite.spritecollideany(self, objects):\r\n                jump = False\r\n            elif pygame.sprite.spritecollideany(self, floor) and pygame.sprite.spritecollideany(self, objects):\r\n                jump = False\r\n                self.jump_count = 0\r\n                self.vy = 0\r\n        elif fall and self.jump_count <= 0:\r\n            if not pygame.sprite.spritecollideany(self, floor) and pygame.sprite.spritecollideany(self, objects):\r\n                self.jump_count -= 2\r\n                self.vy = -self.jump_count\r\n            elif not pygame.sprite.spritecollideany(self, floor) and not pygame.sprite.spritecollideany(self, objects):\r\n                fall = False\r\n                self.vy = -self.jump_count\r\n                self.jump_count = self.vy\r\n            elif pygame.sprite.spritecollideany(self, floor):\r\n                fall = False\r\n                self.vy = 0\r\n        else:\r\n            self.jump = False\r\n            fall = False\r\n            self.vy = self.jump_count if self.jump_count != 0 else self.vy\r\n            self.jump_count += 1\r\n            if pygame.sprite.spritecollideany(self, floor) or pygame.sprite.spritecollideany(self, objects):\r\n                self.vy = 0\r\n                self.jump_count = 0\r\n        if pygame.sprite.spritecollideany(self, thorns) and not a:\r\n            for thorn in thorns:\r\n                if self.rect.colliderect(thorn.rect):\r\n                    if thorn.rect.x + thorn.rect.w // 2 <= self.rect.x + self.rect.w // 2:\r\n                        self.rect.x += 50\r\n                        self.rect.y -= 40\r\n                        self.vx = 0\r\n                    elif thorn.rect.x + thorn.rect.w // 2 > self.rect.x + self.rect.w // 2:\r\n                        self.rect.x -= 50\r\n                        self.rect.y -= 40\r\n                        self.vx = 0\r\n                #     if self.x1motoin == \"y\":\r\n                #         self.rect = self.rect.move(-self.v * 23, -self.v * 5)\r\n                #     if self.x2motoin == \"y\":\r\n                #         self.rect = self.rect.move(self.v * 23, -self.v * 5)\r\n                #     if self.x1motoin != \"y\" and self.x2motoin != \"y\":\r\n                #         self.rect = self.rect.move(-self.v * 23, -self.v * 5)\r\n                # if fall:\r\n                #     self.rect = self.rect.move(self.v * 15, 0)\r\n                self.hp -= 10\r\n                a = True\r\n        if pygame.sprite.spritecollideany(self, bullets):\r\n            for bullet in bullets:\r\n                if self.rect.colliderect(bullet.rect):\r\n                    self.hp -= bullet.minus_hp\r\n                    bullet.kill()\r\n        if pygame.sprite.spritecollideany(self, heals):\r\n            for heal in heals:\r\n                if self.rect.colliderect(heal.rect):\r\n                    self.hp += heal.plus_hp\r\n                    if self.hp >= 100:\r\n                        self.hp = 100\r\n                    heal.kill()\r\n        if not a:\r\n            self.rect = self.rect.move(self.vx, self.vy)\r\n        if self.hp <= 0:\r\n            self.death()\r\n        return (jump, fall)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classPlayer.py b/classPlayer.py
--- a/classPlayer.py	
+++ b/classPlayer.py	
@@ -4,12 +4,11 @@
 
 
 class Player(pygame.sprite.Sprite):
-    image = pygame.transform.scale(load_image("Idle.png"), (1500, 200))
-    image1 = pygame.transform.scale(load_image("Jump.png"), (2750, 200))
-    image2 = pygame.transform.scale(load_image("Run.png"), (2000, 200))
-
     def __init__(self, x, y, all_sprites, size, screen):
         super().__init__(all_sprites)
+        image = pygame.transform.scale(load_image("Idle.png"), (1500,  * h))
+        image1 = pygame.transform.scale(load_image("Jump.png"), (2750, 200))
+        image2 = pygame.transform.scale(load_image("Run.png"), (2000, 200))
         self.frames = []
         self.frame_tick = 20
         self.frame_tick_idle = 0
Index: classMainFloor.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nclass MainFloor(pygame.sprite.Sprite):\r\n    def __init__(self, size, group):\r\n        super().__init__(group)\r\n        self.image = pygame.Surface((size[0], 0.1 * size[1]), pygame.SRCALPHA, 32)\r\n        pygame.draw.rect(self.image, pygame.Color(\"#131313\"), (0, 0, size[0], size[1]))\r\n        self.rect = pygame.Rect(0, 0.9 * size[1], size[0], size[1])\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/classMainFloor.py b/classMainFloor.py
--- a/classMainFloor.py	
+++ b/classMainFloor.py	
@@ -5,4 +5,6 @@
         super().__init__(group)
         self.image = pygame.Surface((size[0], 0.1 * size[1]), pygame.SRCALPHA, 32)
         pygame.draw.rect(self.image, pygame.Color("#131313"), (0, 0, size[0], size[1]))
-        self.rect = pygame.Rect(0, 0.9 * size[1], size[0], size[1])
+        self.rect = pygame.Rect(0, 0.9 * size[1], size[0], 0.01 * size[1])
+
+
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nfrom libraryImages import load_image\r\n\r\npygame.init()\r\nscreen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\r\nw, h = screen.get_size()\r\nscreen = pygame.display.set_mode((0.5 * w, 0.5 * h))\r\n\r\nall_units = pygame.sprite.Group()\r\nall_enemy = pygame.sprite.Group()\r\nfloor = pygame.sprite.Group()\r\nobjects = pygame.sprite.Group()\r\nthorns = pygame.sprite.Group()\r\nbullets = pygame.sprite.Group()\r\nheals = pygame.sprite.Group()\r\n\r\nfrom classPlayer import Player\r\nfrom classEnemy import StandartEnemy, NoBulletEnemy, NoMovementEnemy\r\nfrom classMainFloor import MainFloor\r\nfrom classBlock import Block\r\nfrom classThorns import Thorns\r\nfrom classHeal import LittleHeal, BigHeal\r\n\r\nrun = True\r\nwhile run:\r\n    screen.fill(\"white\")\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.QUIT:\r\n            exit()\r\n        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:\r\n            run = False\r\n    pygame.display.flip()\r\n\r\nMainFloor((w, h), floor)\r\nplayer = Player(0.5 * w, 0.8 * h, all_units, (w, h), screen)\r\nclock = pygame.time.Clock()\r\njump = False\r\nf = False\r\nfall = False\r\nmotion = \"\"\r\nscreen_image = pygame.transform.scale(load_image(\"screen.jpg\"), (w, h))\r\nscreen_finish_image = pygame.transform.scale(load_image(\"screen_finish.jpg\"), (0.5 * w, 0.5 * h))\r\nlevel = 0\r\nx = 0\r\nthe_first_download = False\r\n\r\n# StandartEnemy(0.5 * w, 0.3 * h, all_enemy, (w, h))\r\n# NoBulletEnemy(0.5 * w, 0.3 * h, all_enemy, (w, h))\r\nNoMovementEnemy(0.7 * w, 0.7 * h, all_enemy, (w, h))\r\nBlock(0.5 * w, 1, w, h, objects)\r\nBlock(0.55 * w, 1, w, h, objects)\r\nBlock(0.6 * w, 1, w, h, objects)\r\nBlock(0.65 * w, 1, w, h, objects)\r\nBigHeal(0.7 * w, 0.8 * h, w, h, heals)\r\n\r\ndef training_level():\r\n    global the_first_download\r\n    font = pygame.font.Font(None, 50)\r\n    text = font.render(\"Для движения нажмите и удерживайте клавиши 'A' или 'D'\", True, \"white\")\r\n    text2 = font.render(\"Для прыжка нажмите 'W' или 'SPACE'\", True, \"white\")\r\n    text3 = font.render(\"Вы можете запрыгнуть на платформу\", True, \"white\")\r\n    text4 = font.render(\"Находясь на платформе вы можете нажать одновременно 'S' и 'SPACE' чтобы спрыгнуть с платформы\", True, \"white\")\r\n    text5 = font.render(\"Чтобы ускориться зажмите 'SHIFT'\", True, \"white\")\r\n    text6 = font.render(\"Совет вам, игрок, не натыкайтесь на шипы, а то будет бобо...\", True, \"white\")\r\n    screen.blit(text, (0.3 * w + x, 0.4 * h))\r\n    screen.blit(text2, (1.3 * w + x, 0.4 * h))\r\n    screen.blit(text3, (2.3 * w + x, 0.4 * h))\r\n    screen.blit(text4, (3.3 * w + x, 0.4 * h))\r\n    screen.blit(text5, (4.5 * w + x, 0.4 * h))\r\n    screen.blit(text6, (6 * w + x, 0.4 * h))\r\n    if not the_first_download:\r\n        the_first_download = True\r\n        Block(2.5 * w + x, 1, w, h, objects)\r\n        Block(3.7 * w + x, 1, w, h, objects)\r\n        Block(3.7 * w + x, 2, w, h, objects)\r\n        Thorns(6.3 * w + x, 1, w, h, thorns)\r\n\r\n\r\nrunning = True\r\nwhile running:\r\n    screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)\r\n    screen.fill((50, 50, 50))\r\n    player.running = True\r\n    while player.running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                player.running = False\r\n                player.rect.x = 0.5 * w\r\n                player.rect.y = 0.8 * h\r\n                player.hp = player.max_hp\r\n                x = 0\r\n                for it in bullets:\r\n                    it.kill()\r\n                bullets.clear(screen, pygame.Surface((w, h)))\r\n                for it in heals:\r\n                    it.kill()\r\n                heals.clear(screen, pygame.Surface((w, h)))\r\n                for it in all_enemy:\r\n                    it.kill()\r\n                all_enemy.clear(screen, pygame.Surface((w, h)))\r\n                for it in objects:\r\n                    it.kill()\r\n                objects.clear(screen, pygame.Surface((w, h)))\r\n                for it in thorns:\r\n                    it.kill()\r\n                thorns.clear(screen, pygame.Surface((w, h)))\r\n                the_first_download = False\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_d:\r\n                    player.x1motoin = \"y\"\r\n                if event.key == pygame.K_a:\r\n                    player.x2motoin = \"y\"\r\n                if (event.key == pygame.K_w or event.key == pygame.K_SPACE) and not jump and not f and not fall and player.jump_count == 0:\r\n                    jump = True\r\n                    player.jump_count = player.jump_max\r\n                if event.key == pygame.K_LSHIFT:\r\n                    player.v *= 2\r\n                if event.key == pygame.K_s:\r\n                    f = True\r\n                if event.key == pygame.K_SPACE and f:\r\n                    fall = True\r\n                    player.jump_count = -player.jump_max\r\n            if event.type == pygame.KEYUP:\r\n                if event.key == pygame.K_d:\r\n                    player.x1motoin = \"n\"\r\n                if event.key == pygame.K_a:\r\n                    player.x2motoin = \"n\"\r\n                if event.key == pygame.K_LSHIFT:\r\n                    player.v /= 2\r\n                if event.key == pygame.K_s:\r\n                    f = False\r\n        if player.rect.x < 0.35 * w:\r\n            player.rect = player.rect.move(-player.vx, 0)\r\n            objects.update(\"r\", player.v)\r\n            thorns.update(\"r\", player.v)\r\n            heals.update(\"r\", player.v)\r\n            motion = \"r\"\r\n            x += player.v\r\n        elif player.rect.x + player.radius > 0.65 * w:\r\n            player.rect = player.rect.move(-player.vx, 0)\r\n            objects.update(\"l\", player.v)\r\n            thorns.update(\"l\", player.v)\r\n            heals.update(\"l\", player.v)\r\n            motion = \"l\"\r\n            x -= player.v\r\n        else:\r\n            motion = \"\"\r\n        jump, fall = player.upd(jump, fall, objects, thorns, floor, bullets, heals)\r\n        screen.blit(screen_image, (0, 0))\r\n        if level == 0:\r\n            screen.fill((50, 50, 50))\r\n            training_level()\r\n        # screen.blit(screen2, (0, 0))\r\n        objects.draw(screen)\r\n        thorns.draw(screen)\r\n        bullets.update(motion, player.v)\r\n        bullets.draw(screen)\r\n        heals.draw(screen)\r\n        floor.draw(screen)\r\n        all_enemy.update(floor, objects, motion, player, bullets)\r\n        all_enemy.draw(screen)\r\n        all_units.draw(screen)\r\n        player.show_hp()\r\n        clock.tick(120)\r\n        pygame.display.flip()\r\n    screen = pygame.display.set_mode((0.5 * w, 0.5 * h))\r\n    run = True\r\n    while run:\r\n        screen.blit(screen_finish_image, (0, 0))\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n                run = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:\r\n                run = False\r\n        pygame.display.flip()\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -47,12 +47,12 @@
 
 # StandartEnemy(0.5 * w, 0.3 * h, all_enemy, (w, h))
 # NoBulletEnemy(0.5 * w, 0.3 * h, all_enemy, (w, h))
-NoMovementEnemy(0.7 * w, 0.7 * h, all_enemy, (w, h))
-Block(0.5 * w, 1, w, h, objects)
-Block(0.55 * w, 1, w, h, objects)
-Block(0.6 * w, 1, w, h, objects)
-Block(0.65 * w, 1, w, h, objects)
-BigHeal(0.7 * w, 0.8 * h, w, h, heals)
+# NoMovementEnemy(0.7 * w, 0.7 * h, all_enemy, (w, h))
+# Block(0.5 * w, 1, w, h, objects)
+# Block(0.55 * w, 1, w, h, objects)
+# Block(0.6 * w, 1, w, h, objects)
+# Block(0.65 * w, 1, w, h, objects)
+# BigHeal(0.7 * w, 0.8 * h, w, h, heals)
 
 def training_level():
     global the_first_download
